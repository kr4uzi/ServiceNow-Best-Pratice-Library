<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_376096_bpl.ScriptIncludeClient</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>For Client Callable Script Includes, you should create a seperate Script Include instead of making an already existing script include "Client callable = true".&#13;
For security reasons, you only want to expose the absolute minimum of your code.&#13;
Additionally, you should use GlideRecordSecure whereever possible!</description>
        <name>ScriptIncludeClient</name>
        <script><![CDATA[/* global global, gs */
/* global Class, GlideRecordSecure */
/* eslint no-undef: "error" */
var ScriptIncludeClient = Class.create();
ScriptIncludeClient.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	initialize: function(request, responseXML, gc) {
        global.AbstractAjaxProcessor.prototype.initialize.apply(this, arguments);
		
		// initialize the non-client callable script include like this:
		// this.si = new ScriptInclude();
    },
	
	getRecord: function () {
		var result = {
			status: 'error',
			message: ''
		};
		
		try {
			var recordTable = this.getParameter('record_table');
			var recordSysID = this.getParameter('record_sys_id');
			if (recordTable && recordSysID) {
				var recordGr = new GlideRecordSecure(recordTable);
				recordGr.addQuery('sys_id', recordSysID);
				recordGr.setLimit(1);
				recordGr.query();
				if (recordGr.next()) {
					result.record = {
						display_value: recordGr.getDisplayValue()
					};
					
					result.status = 'success';
				} else {
					result.error_message = gs.getMessage('x_376096_bpl_insufficient_privileges');
				}
			} else {
				result.error_message = gs.getMessage('x_376096_bpl_invalid_parameters');
			}
		} catch (e) {
			var errorMessage = '';
			if (e) {
				errorMessage += 'e';

				if (e.stack) {
					errorMessage += '\n' + e.stack;
				}
			}
			
			gs.error('[' + this.type + '] getRecord: ' + errorMessage);
			if (gs.hasRole('admin')) {
				result.message = errorMessage;
			}
		}
		
		return JSON.stringify(result);
	},

    type: 'ScriptIncludeClient'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-10-16 05:39:33</sys_created_on>
        <sys_id>74335df597ea5110d545b18e6253afae</sys_id>
        <sys_name>ScriptIncludeClient</sys_name>
        <sys_package display_value="Best Practice Library" source="x_376096_bpl">53c8084a8702111021d6fcc5dabb35d9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Best Practice Library">53c8084a8702111021d6fcc5dabb35d9</sys_scope>
        <sys_update_name>sys_script_include_74335df597ea5110d545b18e6253afae</sys_update_name>
    </sys_script_include>
</record_update>
